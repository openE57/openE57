name: gcc build

on:
  push:
  pull_request:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    
    env:
      CONAN_USER_HOME: "${{ github.workspace }}/release"
      CONAN_USER_HOME_SHORT: "${{ github.workspace }}/release/short"
      INSTALL_DIR: ${{ github.workspace }}/install/
      
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: install-conan
        run: |
            pip install conan --upgrade
            conan profile new default --detect

      - name: Get Conan
        run: |
          pip3 install wheel setuptools
          pip3 install conan --upgrade
                    
      - name: Linux build
        if: matrix.os == 'ubuntu-latest'
        run: |
            conan profile update settings.compiler.libcxx=libstdc++11 default
            mkdir -p build && cd build
            conan install .. --build=missing
            cmake .. -DBUILD_EXAMPLES=ON -DBUILD_TOOLS=ON -DCMAKE_BUILD_TYPE=Release
            cmake --build . --config Release --target install
            
      - name: Mac build
        if: matrix.os == 'macos-latest'
        run: |
            conan profile update settings.compiler.libcxx=libstdc++11 default
            mkdir -p build && cd build
            conan install .. --build=missing
            cmake .. -DBUILD_EXAMPLES=ON -DBUILD_TOOLS=ON -DCMAKE_BUILD_TYPE=Release
            cmake --build . --config Release --target install
            
      - name: Windows build
        if: matrix.os == 'windows-latest'
        run: |
            md build && cd build
            conan install .. --build=missing
            cmake .. -DBUILD_EXAMPLES=ON -DBUILD_TOOLS=ON -DCMAKE_BUILD_TYPE=Release
            cmake --build . --config Release --target install
