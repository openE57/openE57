/*
 * DemoRead01.cpp - small read demo using the E57 format Foundation API.
 *
 * Copyright (c) 2009 - 2010 Kevin Ackley (kackley@gwi.net)
 * Copyright (c) 2020 - 2022 Michele Adduci (adduci@tutanota.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include <iostream>
#include <openE57/openE57.h>
using namespace e57;
using namespace std;

void printSomePoints(ImageFile imf, CompressedVectorNode points);

int main(int /*argc*/, char** /*argv*/)
{
  try
  {
    /// Read file from disk
    ImageFile     imf("foo.e57", "r");
    StructureNode root = imf.root();

    /// Make sure vector of scans is defined and of expected type.
    /// If "/data3D" wasn't defined, the call to root.get below would raise an exception.
    if (!root.isDefined("/data3D"))
    {
      cout << "File doesn't contain 3D images" << endl;
      return 0;
    }
    Node n = root.get("/data3D");
    if (n.type() != E57_VECTOR)
    {
      cout << "bad file" << endl;
      return 0;
    }

    /// The node is a vector so we can safely get a VectorNode handle to it.
    /// If n was not a VectorNode, this would raise an exception.
    VectorNode data3D(n);

    /// Print number of children of data3D.  This is the number of scans in file.
    int64_t scanCount = data3D.childCount();
    cout << "Number of scans in file:" << scanCount << endl;

    /// For each scan, print out first 4 points in either Cartesian or Spherical coordinates.
    for (int scanIndex = 0; scanIndex < scanCount; scanIndex++)
    {
      /// Get scan from "/data3D", assume its a Structure (else get exception)
      StructureNode scan(data3D.get(scanIndex));
      cout << "got:" << scan.pathName() << endl;

      /// Get "points" field in scan.  Should be a CompressedVectorNode.
      CompressedVectorNode points(scan.get("points"));
      cout << "got:" << points.pathName() << endl;

    }

    imf.close();
  }
  catch (...)
  {
    cerr << "Catching error" << endl;
    return 0;
  }
}
